function(build_h3_frontend)
  include(BuildBoringSSL)
  build_boringssl()
  include(BuildQuiche)
  build_quiche()
  include(BuildCURL)
  build_curl()

  list(APPEND h3_DEPENDS boringssl_ext)
  list(APPEND h3_CMAKE_ARGS -DOPENSSL_USE_STATIC_LIBS=ON)
  list(APPEND h3_CMAKE_ARGS -DOPENSSL_ROOT_DIR=${BORINGSSL_LIBRARY_DIR})
  list(APPEND h3_CMAKE_ARGS -DOPENSSL_INCLUDE_DIR=${BORINGSSL_INCLUDE_DIR})

  list(APPEND h3_DEPENDS quiche_ext)
  list(APPEND h3_CMAKE_ARGS -DQUICHE_LIBRARY=${QUICHE_LIBRARY})
  list(APPEND h3_CMAKE_ARGS -DQUICHE_INCLUDE_DIR=${QUICHE_INCLUDE_DIR})

  list(APPEND h3_DEPENDS curl_ext)
  list(APPEND h3_CMAKE_ARGS -DCURL_LIBRARY=${CURL_LIBRARY})
  list(APPEND h3_CMAKE_ARGS -DCURL_INCLUDE_DIR=${CURL_INCLUDE_DIR})

  list(APPEND h3_CMAKE_ARGS -DBOOST_ROOT=${BOOST_ROOT})
  list(APPEND h3_CMAKE_ARGS -DBOOST_INCLUDEDIR=${Boost_INCLUDE_DIR})
  list(APPEND h3_CMAKE_ARGS -DBOOST_LIBRARYDIR=${BOOST_LIBRARYDIR})

  if (NOT WITH_SYSTEM_BOOST)
    # make sure boost submodule builds first, so h3 can find its byproducts
    list(APPEND h3_DEPENDS Boost)
  endif()

  list(APPEND h3_CMAKE_ARGS -DCMAKE_C_COMPILER=${CMAKE_C_COMPILER})
  list(APPEND h3_CMAKE_ARGS -DCMAKE_CXX_COMPILER=${CMAKE_CXX_COMPILER})
  list(APPEND h3_CMAKE_ARGS -DCMAKE_AR=${CMAKE_AR})
  if(CMAKE_BUILD_TYPE AND NOT CMAKE_BUILD_TYPE STREQUAL "None")
    list(APPEND h3_CMAKE_ARGS -DCMAKE_BUILD_TYPE=${CMAKE_BUILD_TYPE})
  else()
    list(APPEND h3_CMAKE_ARGS -DCMAKE_BUILD_TYPE=Release)
  endif()

  list(APPEND h3_CMAKE_ARGS -DCMAKE_LIBRARY_OUTPUT_DIRECTORY=${CMAKE_LIBRARY_OUTPUT_DIRECTORY})

  set(h3_SOURCE_DIR "${CMAKE_CURRENT_SOURCE_DIR}/h3")
  set(h3_BINARY_DIR "${CMAKE_CURRENT_BINARY_DIR}/h3")
  set(h3_LIBRARY_DIR "${h3_BINARY_DIR}")
  set(h3_LIBRARY "${h3_LIBRARY_DIR}/librgw_h3_quiche.so")
  set(h3_BYPRODUCTS ${h3_LIBRARY})

  include(ExternalProject)
  ExternalProject_Add(h3_ext
    SOURCE_DIR "${h3_SOURCE_DIR}"
    CMAKE_ARGS ${h3_CMAKE_ARGS}
    BINARY_DIR "${h3_BINARY_DIR}"
    BUILD_BYPRODUCTS "${h3_BYPRODUCTS}"
    INSTALL_COMMAND ""
    DEPENDS "${h3_DEPENDS}"
    LIST_SEPARATOR !)

  set(H3_INCLUDE_DIR "${h3_SOURCE_DIR}/include" PARENT_SCOPE)
  set(H3_LIBRARY_DIR "${h3_LIBRARY_DIR}" PARENT_SCOPE)
  set(H3_LIBRARY "${h3_LIBRARY}" PARENT_SCOPE)
endfunction()
